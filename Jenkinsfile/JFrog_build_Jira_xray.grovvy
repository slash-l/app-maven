def server
def rtMaven
def buildInfo

def RESOLVE_SNAPSHOT_REPO = 'slash-maven-virtual'
def RESOLVE_RELEASE_REPO = 'slash-maven-virtual'
def DEPLOY_SNAPSHOT_REPO = 'slash-maven-virtual'
def DEPLOY_RELEASE_REPO = 'slash-maven-virtual'

node('master') {

    stage('Check out') {
        git url: 'git@github.com:slash-l/app-maven.git'
    }

    stage('Artifactory configuration') {
        sh "jf mvnc --server-id-resolve=JFrogChina-Server --server-id-deploy=JFrogChina-Server" +
                " --repo-resolve-releases=slash-maven-virtual --repo-resolve-snapshots=slash-maven-virtual" +
                " --repo-deploy-releases=slash-maven-virtual --repo-deploy-snapshots=slash-maven-virtual"

    }

    stage('Maven Build') {
        sh "jf mvn -f ../pom.xml clean install ---build-name=${JOB_NAME} --build-number=${BUILD_NUMBER}"
    }

    stage ('Git msg collection') {
        sh "jf rt bag ${JOB_NAME} ${BUILD_NUMBER} --config=/Users/jingyil/work/jfrog/project/jfrog-tools/jfrog-cli-aql/buildInfo/jira-cli.conf";
        sh "jf rt bp ${JOB_NAME} ${BUILD_NUMBER}"
//        server.publishBuildInfo buildInfo
    }

    stage('Xray Scan') {
        sh "jf bs ${JOB_NAME} ${BUILD_NUMBER} --fail=false";
    }

    stage('Publish To Dev Repo') {
//        rtMaven.deployer.deployArtifacts buildInfo
    }

    stage ('Promotion') {
        sh "jf rt bpr ${JOB_NAME} ${BUILD_NUMBER} slash-maven-test-local"
    }

}
