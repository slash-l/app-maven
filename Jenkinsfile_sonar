ToolSonar='sonar-scanner'
SonarQubeServer='sonarqube'
TestResultPath='multi3/target/surefire-reports'
def server
def rtMaven
def buildInfo
node{
    stage('Artifactory configuration'){
        server = Artifactory.server 'poc-server'
        rtMaven = Artifactory.newMavenBuild()
        rtMaven.tool = 'maven'
        rtMaven.deployer releaseRepo:'slash-guide-maven-dev-local', snapshotRepo:'slash-guide-maven-dev-local', server: server
        rtMaven.resolver releaseRepo:'slash-guide-maven-virtual', snapshotRepo:'slash-guide-maven-virtual', server: server
        rtMaven.deployer.deployArtifacts = false
        buildInfo = Artifactory.newBuildInfo()
        buildInfo.env.capture = true
    }

    stage('Check out'){
        git url: 'https://gitee.com/mumu79/app-maven.git'
    }

    stage('Exec Maven'){
        env.JAVA_HOME = tool 'java'
        rtMaven.run pom: 'pom.xml', goals: 'clean install', buildInfo: buildInfo
    }

    stage('Sonar Scan'){
        def scannerHome = tool ToolSonar
        withSonarQubeEnv(SonarQubeServer){
            sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${JOB_NAME} -Dsonar.sources=. -Dsonar.java.binaries=* -Dsonar.junit.reportPaths=${TestResultPath}"
        }
    }

    stage('Collection'){
        timeout(10) {
            waitForQualityGate()
        }

        withSonarQubeEnv(SonarQubeServer){
            // 方式一：httpRequest
            //surl = "${SONAR_HOST_URL}/api/measures/component?component=${JOB_NAME}&metricKeys=alert_status,quality_gate_details,coverage,new_coverage,bugs,new_bugs,reliability_rating,vulnerabilities,new_vulnerabilities,security_rating,sqale_rating,test_success_density,skipped_tests,test_failures,tests,test_errors,sqale_index,sqale_debt_ratio,new_sqale_debt_ratio,duplicated_lines_density&additionalFields=metrics,periods"
            //def response = httpRequest consoleLogResponseBody: true,contentType: 'APPLICATION_JSON',httpMode: 'GET',ignoreSslErrors: true,url: surl

            //echo "Status: "+responses.status
            //echo "Content: "+responses.content
            //def propssonar = readJSON text: responses.content

            //def propssonar = conn.getResponseMessage();

            // 方式二：sh curl
            surl = "${SONAR_HOST_URL}/api/measures/component?component=${JOB_NAME}&metricKeys=alert_status,quality_gate_details,coverage,new_coverage,bugs,new_bugs,reliability_rating,vulnerabilities,new_vulnerabilities,security_rating,sqale_rating,test_success_density,skipped_tests,test_failures,tests,test_errors,sqale_index,sqale_debt_ratio,new_sqale_debt_ratio,duplicated_lines_density&additionalFields=metrics,periods"
            result = sh returnStdout: true ,script: "curl -uadmin:123456 '${surl}'"
            def propssonar = readJSON text: result.trim()
            echo "propssonar: "+propssonar

            if (propssonar != null && propssonar.component.measures) {
                propssonar.component.measures.each{ itm ->
                    if (itm.periods && itm.periods[0].value) {
                        name = "qa.code.quality."+itm.metric
                        value = itm.periods[0].value
                        rtMaven.deployer.addProperty(name, value)
                    } else if (itm.value) {
                        name = "qa.code.quality."+itm.metric
                        value = itm.value
                        rtMaven.deployer.addProperty(name, value)
                    }
                }
            }
        }
    }

    stage('Publish & Scan'){
        rtMaven.deployer.deployArtifacts buildInfo
        server.publishBuildInfo buildInfo
    }

    stage('Quality Gate') {
        arti_url = 'http://182.92.214.141:8081/artifactory' //配置artifactory地址

        //通过aql设置质量关卡
        def aql = '''items.find({
            "@build.name": {"$eq" : "''' + buildInfo.name + '''"},
            "@build.number": {"$eq" : "''' + buildInfo.number + '''"},
            "@qa.code.quality.coverage": {"$gte" : "''' + '0.8' + '''"}
        })
        '''

        def response = httpRequest authentication: Bearer 'eyJ2ZXIiOiIyIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYiLCJraWQiOiJzZTFvSmtYUGRNWGk0MmtxQ2JjNklLa2xNOUF2eFRKX09jRUNFbEJQN0VjIn0.eyJzdWIiOiJqZmZlQDAwMFwvdXNlcnNcL2xpdWp5Iiwic2NwIjoiYXBwbGllZC1wZXJtaXNzaW9uc1wvYWRtaW4gYXBpOioiLCJhdWQiOiJqZnJ0QCoiLCJpc3MiOiJqZmZlQDAwMCIsImlhdCI6MTYyNzgxNDIwMywianRpIjoiZTYyYzgzZTAtYmJjOS00YTVlLTkxZTEtZjdkMzdmYzc0NWM3In0.K0wdU69iKIFxfq7i2FYlQiI_e7Vys8cwPDDjOmO6Dp62Puh1bOboXkg_-xIuI332mIkNv84L3L5CfXpFe5KtzMVjsaGeLV_fcxNkQCnAy5ZH6A8dPCbnGor60RRYNGFCVR1s2zb6aW6zem4kbVgnvw3pNU8DXTiddfLjUG-zhDuepFO-D9ESkjwYSxQoAybD0KF3f1dtkn1tFhxM0zjloiC2_jVadCh-u5afJm9-r9SiixA62diug6J-XaAh1O1KGfjcVNHa_JVdCQbp0UGRH84xV2Ovl9QEyfzuU_VSr45KNu1YhoLKesP7bySTPj8-2UCUFDifP12BJpnWN3Lgtw',
            consoleLogResponseBody: true,
            contentType: 'TEXT_PLAIN',
            httpMode: 'POST',
            ignoreSslErrors: true,
            requestBody: aql,
            url: "${arti_url}/api/search/aql"

        echo "Status: " + response.status
        echo "Content: " + response.content
        echo aql
        def props = readJSON text: response.content

        //如果质量关卡没有通过，退出这次构建
        if(props.range.total <= 0){
            error 'Did not pass the quality gate!!!'
        }
    }
}